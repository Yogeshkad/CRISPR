  scenario("author-only-delete-note", async (s, t) => {
    const {alice, bob} = await s.players({alice: conductorConfig, bob: conductorConfig}, true)
    const createNoteResult = await alice.call("notes", "notes", "create_note", {"note_input" : {"title":"Title first note", "content":"Content first note"}})
    await s.consistency()
    const listNotesResult = await alice.call("notes", "notes", "list_notes", {})
    t.deepEqual(listNotesResult.Ok.length, 1)
    const deleteResult = await bob.call("notes", "notes", "delete_note", { "id": createNoteResult.Ok.id, "created_at": createNoteResult.Ok.createdAt, "address": createNoteResult.Ok.address })
    t.deepEqual(JSON.parse(deleteResult.Err.Internal).kind, { ValidationFailed: 'Agent who did not author is trying to delete' })
    const listNotesResult2 = await alice.call("notes", "notes", "list_notes", {})
    t.deepEqual(listNotesResult2.Ok.length, 1)
  })